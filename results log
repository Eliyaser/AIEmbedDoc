 C:\Eliyaser\AI project\sloopstash AI\emmeding pdf> docker compose up -d
[+] Running 3/3
 ✔ Network emmedingpdf_default       Created                                                                                                                0.1s 
 ✔ Container ollama                  Started                                                                                                                0.7s 
 ✔ Container emmedingpdf-chromadb-1  Started                                                                                                                0.6s 
PS C:\Eliyaser\AI project\sloopstash AI\emmeding pdf> docker exec -it ollama bash
root@ef315ee226cf:/# ollama pull mxbai-embed-large:335m
pulling manifest
root@ef315ee226cf:/# ollama pull mxbai-embed-large:335m
root@ef315ee226cf:/# ollama pull mxbai-embed-large:335m
pulling manifest
pulling 819c2adf5ce6: 100% ▕███████████████████████████████████████████████████████████████████████████████████████████████████▏ 669 MB
pulling c71d239df917: 100% ▕███████████████████████████████████████████████████████████████████████████████████████████████████▏  11 KB
pulling b837481ff855: 100% ▕███████████████████████████████████████████████████████████████████████████████████████████████████▏   16 B
pulling 38badd946f91: 100% ▕███████████████████████████████████████████████████████████████████████████████████████████████████▏  408 B
verifying sha256 digest
writing manifest
success
root@ef315ee226cf:/# exit
exit
PS C:\Eliyaser\AI project\sloopstash AI\emmeding pdf> python pdf_to_chroma.py
[INFO] Loaded 5 pages from resume.pdf
[INFO] Generated 5 embeddings
[SUCCESS] Stored embeddings in Chroma collection: pdf_vectors
PS C:\Eliyaser\AI project\sloopstash AI\emmeding pdf> python printresult.py  
{'ids': ['resume.pdf_page_0', 'resume.pdf_page_1', 'resume.pdf_page_2', 'resume.pdf_page_3', 'resume.pdf_page_4'], 'embeddings': None, 'metadatas': [{'source': 'resume.pdf', 'page': 'resume.pdf_page_0'}, {'page': 'resume.pdf_page_1', 'source': 'resume.pdf'}, {'page': 'resume.pdf_page_2', 'source': 'resume.pdf'}, {'page': 'resume.pdf_page_3', 'source': 'resume.pdf'}, {'page': 'resume.pdf_page_4', 'source': 'resume.pdf'}], 'documents': ['ELIYASER JAMES \nMobile: +91-8610757039 ~ E-Mail: eliyaser3121@gmail.com \nLinkedIn: https://www.linkedin.com/in/eliyaser  | GitHub: https://github.com/eliyaser \n                   Experienced developer skilled in migrating full-stack projects. Passionate about leveraging \ncontainerization technologies to build robust, cutting-edge products and ensure seamless \nmaintenance in the cloud. Committed to innovation and quality. \n \nPROFESSIONAL SYNOPSIS  \n• Software Engineer with 5 years of experience in Frontend development, transitioning to a DevOps Engineer \nrole. Deploying full-stack applications to multi-cloud environments like AWS and Azure through both manual \nand automated methods. \n• Proficient in designing scalable architectures, automating workflows, and deploying applications using tools \nlike Docker, Kubernetes, and Jenkins. Passionate about streamlining CI/CD pipelines and enhancing \noperational efficiency. \n• Experienced Angular developer adept at migration projects. Passionate ', '• NAT Gateway Implementation: Managing outbound internet connectivity for private resources \nDevOps & Container Technologies \n• Docker  \n▪ Container deployment and orchestration: Creating and managing containerized applications for \nconsistent deployment \n▪ YAML configuration management: Writing and maintaining Docker Compose files for multi-container \napplications \n▪ Custom image creation: Building optimized container images with multi-stage builds \n▪ Local full-stack application deployment: Setting up development environments with containerized \nservices \n• Kubernetes  \n▪ Container Runtime Interface (CRI): Managing container runtime implementations and configurations \n▪ Container Network Interface (CNI): Implementing networking solutions for container communication \n▪ Cluster creation and management: Setting up and maintaining production-grade Kubernetes clusters \n▪ Application deployment: Orchestrating containerized applications across clusters \n▪ YAML template development: Creating', '▪ Workflow optimization: Implementing efficient branching and merging strategies \n▪ GitHub Actions automation: Creating automated workflows for code integration and deployment \n▪ GitHub Pages deployment: Managing static website hosting and documentation \nInfrastructure as Code \n• Terraform : \n▪ Infrastructure automation: Implementing declarative infrastructure provisioning \n▪ HashiCorp Configuration Language (HCL): Writing maintainable infrastructure code \n• Platform Building : \n▪ Vagrant VM automation: Creating reproducible development environments \n▪ Docker OCI image creation: Building standardized container images \n▪ Packer image building for AWS and Azure: Automating cross-platform image creation \nDatabase Technologies \n• SQL: Designing and optimizing complex database queries and schemas \n• Redis: Implementing high-performance caching and real-time data structures \n• MongoDB: Managing scalable NoSQL document databases \nOperating Systems \n• Linux : \n▪ SSH configuration and managemen', 'S.I. Systems | July 2023 – Present \n• Set up Docker environments to run .NET Core backend services, enabling API integration and implementation in \nan Angular frontend. \n• Independently handled modules and successfully delivered full project implementations. \n• Resolved issues with missed functionalities (e.g., email integration) across multiple modules during migration \nprojects. \n• Migrated Angular applications from version 13 to 16. Initially estimated to take 6 months, but successfully \ncompleted the upgrade in half a day. \n• Led the development of a new Expense Management Project. Built the entire application from scratch and \ndelivered it independently, managing frontend and backend seamlessly. \nS.I. Systems | July 2022 – July 2023 \n• Contributed to a large-scale migration project for a legacy application running for over 15 years in ColdFusion. \n• Successfully implemented complex drag-and-drop functionality, movable table rows, and pin features for the \nCandidate module. \n• Enha', '• Optimizing Amazon Linux 2 Base Image: \nContributed to an open-source initiative to optimize Amazon Linux 2 OCI base images, reducing image size by \n50% for faster deployments and resource savings. \nGitHub: Amazon Linux2 Optimization \n• Jenkins Pipeline for OCI Image Deployment: \nDeveloped a robust oci.jenkinsfile to automate Docker image creation and deployment through Jenkins, \nstreamlining CI/CD pipelines for OCI environments. \nGitHub: oci.jenkinsfile \n• Automating Redis Database Management: \nCreated Python scripts to automate Redis database lifecycle management, including start, stop, and monitoring \noperations, ensuring seamless database handling. \nGitHub: redis_auto_script.py \n• Full-Stack Song Book App | Angular 18, Flask, MongoDB: \nDeveloped a responsive web application for song management, featuring lyrics display and projection \ncapabilities. Built with Angular 18 for the frontend, Flask APIs for backend logic, and MongoDB for efficient data \nstorage. Delivered an intuitive '], 'data': None, 'uris': None, 'included': ['metadatas', 'documents']}
PS C:\Eliyaser\AI project\sloopstash AI\emmeding pdf>